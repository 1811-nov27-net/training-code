//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConversionConsumer.ConversionReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Temperature", Namespace="http://schemas.datacontract.org/2004/07/ConversionService")]
    [System.SerializableAttribute()]
    public partial class Temperature : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/ConversionService")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ConversionReference.IConversionService")]
    public interface IConversionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/FahrenheitToCelsius", ReplyAction="http://tempuri.org/IConversionService/FahrenheitToCelsiusResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(System.ArgumentNullException), Action="http://tempuri.org/IConversionService/FahrenheitToCelsiusArgumentNullExceptionFau" +
            "lt", Name="ArgumentNullException", Namespace="http://schemas.datacontract.org/2004/07/System")]
        ConversionConsumer.ConversionReference.Temperature FahrenheitToCelsius(ConversionConsumer.ConversionReference.Temperature fahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/FahrenheitToCelsius", ReplyAction="http://tempuri.org/IConversionService/FahrenheitToCelsiusResponse")]
        System.Threading.Tasks.Task<ConversionConsumer.ConversionReference.Temperature> FahrenheitToCelsiusAsync(ConversionConsumer.ConversionReference.Temperature fahrenheit);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/CelsiusToFahrenheit", ReplyAction="http://tempuri.org/IConversionService/CelsiusToFahrenheitResponse")]
        ConversionConsumer.ConversionReference.Temperature CelsiusToFahrenheit(ConversionConsumer.ConversionReference.Temperature celsius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/CelsiusToFahrenheit", ReplyAction="http://tempuri.org/IConversionService/CelsiusToFahrenheitResponse")]
        System.Threading.Tasks.Task<ConversionConsumer.ConversionReference.Temperature> CelsiusToFahrenheitAsync(ConversionConsumer.ConversionReference.Temperature celsius);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/GetData", ReplyAction="http://tempuri.org/IConversionService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/GetData", ReplyAction="http://tempuri.org/IConversionService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IConversionService/GetDataUsingDataContractResponse")]
        ConversionConsumer.ConversionReference.CompositeType GetDataUsingDataContract(ConversionConsumer.ConversionReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConversionService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IConversionService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<ConversionConsumer.ConversionReference.CompositeType> GetDataUsingDataContractAsync(ConversionConsumer.ConversionReference.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConversionServiceChannel : ConversionConsumer.ConversionReference.IConversionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConversionServiceClient : System.ServiceModel.ClientBase<ConversionConsumer.ConversionReference.IConversionService>, ConversionConsumer.ConversionReference.IConversionService {
        
        public ConversionServiceClient() {
        }
        
        public ConversionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConversionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConversionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConversionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConversionConsumer.ConversionReference.Temperature FahrenheitToCelsius(ConversionConsumer.ConversionReference.Temperature fahrenheit) {
            return base.Channel.FahrenheitToCelsius(fahrenheit);
        }
        
        public System.Threading.Tasks.Task<ConversionConsumer.ConversionReference.Temperature> FahrenheitToCelsiusAsync(ConversionConsumer.ConversionReference.Temperature fahrenheit) {
            return base.Channel.FahrenheitToCelsiusAsync(fahrenheit);
        }
        
        public ConversionConsumer.ConversionReference.Temperature CelsiusToFahrenheit(ConversionConsumer.ConversionReference.Temperature celsius) {
            return base.Channel.CelsiusToFahrenheit(celsius);
        }
        
        public System.Threading.Tasks.Task<ConversionConsumer.ConversionReference.Temperature> CelsiusToFahrenheitAsync(ConversionConsumer.ConversionReference.Temperature celsius) {
            return base.Channel.CelsiusToFahrenheitAsync(celsius);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public ConversionConsumer.ConversionReference.CompositeType GetDataUsingDataContract(ConversionConsumer.ConversionReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<ConversionConsumer.ConversionReference.CompositeType> GetDataUsingDataContractAsync(ConversionConsumer.ConversionReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
